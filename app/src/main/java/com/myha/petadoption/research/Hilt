HILT

(https://developer.android.com/training/dependency-injection/hilt-android)
(https://medium.com/@kiitvishal89/i-was-extremely-happy-with-dagger-but-was-utterly-disappointed-in-dagger-android-297b3d056af)
Hilt currently supports the following Android classes:

    Application (by using @HiltAndroidApp)
    ViewModel (by using @HiltViewModel)
    Activity (by using @AndroidEntryPoint)
    Fragment (by using @AndroidEntryPoint)
    View (by using @AndroidEntryPoint)
    Service (by using @AndroidEntryPoint)
    BroadcastReceiver (by using @AndroidEntryPoint)
* Any android class that intends to get injected should become an android entry point.
If you annotate an Android class with @AndroidEntryPoint, then you also must annotate Android classes that depend on it. For example, if you annotate a fragment, then you must also annotate any activities where you use that fragment.
Note: The following exceptions apply to Hilt support for Android classes:

    Hilt only supports activities that extend ComponentActivity, such as AppCompatActivity.
    Hilt only supports fragments that extend androidx.Fragment.
    Hilt does not support retained fragments.

1. Inject field injection dependencies into Android classes
** Fields injected by Hilt cannot be private. Attempting to inject a private field with Hilt results in a compilation error.

To obtain dependencies from a component, use the @Inject annotation to perform field injection:
    @AndroidEntryPoint
    class ExampleActivity : AppCompatActivity() {
        @Inject lateinit var analytics: AnalyticsAdapter
        ...
    }

2a. Define Hilt bindings
One way to provide binding information to Hilt is constructor injection.
Use the @Inject annotation on the constructor of a class
to tell Hilt how to provide instances of that class
    class AnalyticsAdapter @Inject constructor(
      private val service: AnalyticsService
    ) { ... }

2b. Hilt Module
Sometimes a type cannot be constructor-injected. This can happen for multiple reasons.
For example, you cannot constructor-inject an interface. You also cannot constructor-inject a type that you do not own, such as a class from an external library.
In these cases, you can provide Hilt with binding information by using Hilt modules.

A Hilt module is a class that is annotated with @Module informs Hilt how to provide instances of certain types.
you must annotate Hilt modules with @InstallIn to tell Hilt which Android class each module will be used or installed in.

3a. Inject interface instances with @Binds
The @Binds annotation tells Hilt which implementation to use when it needs to provide an instance of an interface.
Ex:
    interface AnalyticsService {
      fun analyticsMethods()
    }

    // Constructor-injected, because Hilt needs to know how to
    // provide instances of AnalyticsServiceImpl, too.
    class AnalyticsServiceImpl @Inject constructor(
      ...
    ) : AnalyticsService { ... }

    @Module
    @InstallIn(ActivityComponent::class)
    abstract class AnalyticsModule {

      @Binds
      abstract fun bindAnalyticsService(
        analyticsServiceImpl: AnalyticsServiceImpl
      ): AnalyticsService
    }

3b. Inject instances with @Provides
Interfaces are not the only case where you cannot constructor-inject a type.
Constructor injection is also not possible if you don't own the class because
it comes from an external library (classes like Retrofit, OkHttpClient, or Room databases), or if instances must be created with the builder pattern.

you can tell Hilt how to provide instances of this type by creating a function inside a Hilt module
and annotating that function with @Provides.

    @Module
    @InstallIn(ActivityComponent::class)
    object AnalyticsModule {

      @Provides
      fun provideAnalyticsService(
        // Potential dependencies of this type
      ): AnalyticsService {
          return Retrofit.Builder()
                   .baseUrl("https://example.com")
                   .build()
                   .create(AnalyticsService::class.java)
      }
    }

4. Provide multiple bindings for the same type
In cases where you need Hilt to provide different implementations of the same type as dependencies, you must provide Hilt with multiple bindings. You can define multiple bindings for the same type with qualifiers.

    @Qualifier
    @Retention(AnnotationRetention.BINARY)
    annotation class AuthInterceptorOkHttpClient

    @Qualifier
    @Retention(AnnotationRetention.BINARY)
    annotation class OtherInterceptorOkHttpClient
    ------      ------      ------      ------
    @Module
    @InstallIn(SingletonComponent::class)
    object NetworkModule {

      @AuthInterceptorOkHttpClient
      @Provides
      fun provideAuthInterceptorOkHttpClient(
        authInterceptor: AuthInterceptor
      ): OkHttpClient {
          return OkHttpClient.Builder()
                   .addInterceptor(authInterceptor)
                   .build()
      }

      @OtherInterceptorOkHttpClient
      @Provides
      fun provideOtherInterceptorOkHttpClient(
        otherInterceptor: OtherInterceptor
      ): OkHttpClient {
          return OkHttpClient.Builder()
                   .addInterceptor(otherInterceptor)
                   .build()
      }
    }
    ------   How   ------   to   ------   inject   ------
    // As a dependency of another class.
    @Module
    @InstallIn(ActivityComponent::class)
    object AnalyticsModule {

      @Provides
      fun provideAnalyticsService(
        @AuthInterceptorOkHttpClient okHttpClient: OkHttpClient
      ): AnalyticsService {
          return Retrofit.Builder()
                   .baseUrl("https://example.com")
                   .client(okHttpClient)
                   .build()
                   .create(AnalyticsService::class.java)
      }
    }

    // As a dependency of a constructor-injected class.
    class ExampleServiceImpl @Inject constructor(
      @AuthInterceptorOkHttpClient private val okHttpClient: OkHttpClient
    ) : ...

    // At field injection.
    @AndroidEntryPoint
    class ExampleActivity: AppCompatActivity() {

      @AuthInterceptorOkHttpClient
      @Inject lateinit var okHttpClient: OkHttpClient
    }

6. Predefined qualifiers in Hilt
as you might need the Context class from either the application or the activity,
Hilt provides the @ApplicationContext and @ActivityContext qualifiers.
    class AnalyticsServiceImpl @Inject constructor(
      @ApplicationContext context: Context
    ) : AnalyticsService { ... }

    class AnalyticsAdapter @Inject constructor(
        @ActivityContext private val context: Context,
        private val service: AnalyticsService
    ) { ... }
